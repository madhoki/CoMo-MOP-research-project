import os
import numpy as np
import pandas as pd
from scipy.spatial.distance import cdist
import math

# === CONFIG ===
folder_path = 'expt_structures_from_OntoMOPs_KG'  # change this to your folder

# === FUNCTIONS ===
def read_xyz(filepath):
    atoms = []
    coords = []
    with open(filepath, 'r') as f:
        lines = f.readlines()[2:]  # skip first two lines
        for line in lines:
            parts = line.strip().split()
            if len(parts) >= 4:
                atoms.append(parts[0])
                coords.append(list(map(float, parts[1:4])))
    return np.array(atoms), np.array(coords)

def get_pd_distances(atoms, coords):
    pd_coords = coords[atoms == 'Pd']
    dists = []
    for i in range(len(pd_coords)):
        for j in range(i+1, len(pd_coords)):
            dists.append(np.linalg.norm(pd_coords[i] - pd_coords[j]))
    return dists

def get_max_enclosed_sphere(atoms, coords, exclude_H=True):
    centroid = np.mean(coords, axis=0)
    distances = np.linalg.norm(coords - centroid, axis=1)
    if exclude_H:
        distances = [d for d, a in zip(distances, atoms) if a != 'H']
    radius = min(distances)
    volume = (4/3) * np.pi * radius**3
    return radius, volume

def get_max_escape_radius(centroid, coords, n_directions=500):
    directions = np.random.randn(n_directions, 3)
    directions /= np.linalg.norm(directions, axis=1)[:, None]

    max_radius = 0
    for dir_vec in directions:
        for r in np.linspace(0, 20, 200):
            probe = centroid + r * dir_vec
            dists = np.linalg.norm(coords - probe, axis=1)
            if np.min(dists) < 1.5:
                max_radius = max(max_radius, r)
                break
    volume = (4/3) * np.pi * max_radius**3
    return max_radius, volume

# === MAIN LOOP ===
data = []
for filename in os.listdir(folder_path):
    if filename.endswith('.xyz'):
        filepath = os.path.join(folder_path, filename)
        try:
            atoms, coords = read_xyz(filepath)
            centroid = np.mean(coords, axis=0)

            pd_dists = get_pd_distances(atoms, coords)
            min_pd, max_pd = (min(pd_dists), max(pd_dists)) if pd_dists else (None, None)

            enc_radius, enc_volume = get_max_enclosed_sphere(atoms, coords)
            esc_radius, esc_volume = get_max_escape_radius(centroid, coords)

            data.append({
                'filename': filename,
                'num_Pd': np.sum(atoms == 'Pd'),
                'min_Pd–Pd_dist (Å)': round(min_pd, 2) if min_pd else None,
                'max_Pd–Pd_dist (Å)': round(max_pd, 2) if max_pd else None,
                'enclosed_radius (Å)': round(enc_radius, 2),
                'enclosed_volume (Å³)': round(enc_volume, 2),
                'escape_radius (Å)': round(esc_radius, 2),
                'escape_volume (Å³)': round(esc_volume, 2)
            })
        except Exception as e:
            print(f"Error processing {filename}: {e}")

# === SAVE TO CSV ===
df = pd.DataFrame(data)
df.to_csv("mop_properties_output.csv", index=False)
print("✅ Analysis complete. Results saved to mop_properties_output.csv")
